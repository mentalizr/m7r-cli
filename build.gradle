plugins {
    id 'java'
}

group 'org.mentalizr'
version = rootProject.file('version').text.trim()

repositories {
    mavenCentral()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation 'org.mentalizr:m7r-service-objects:0.0.1-SNAPSHOT'

    implementation 'com.github.arthurpicht:utils-core:1.3.0'
    implementation 'com.github.arthurpicht:utils-io:0.0.5'
//    implementation 'com.github.arthurpicht:cli:0.1-alpha8'
     implementation 'com.github.arthurpicht:cli:095c04163a'
    implementation 'com.github.arthurpicht:AP-Configuration:0.1.0'

    implementation 'org.glassfish.jersey.media:jersey-media-jaxb:2.32'
    implementation 'org.glassfish.jersey.media:jersey-media-json-binding:2.32'
    implementation 'jakarta.xml.bind:jakarta.xml.bind-api:2.3.3'
    implementation 'com.sun.xml.bind:jaxb-impl:2.3.3'

    testImplementation 'org.junit.jupiter:junit-jupiter:5.7.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.0'
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
}

test {
    useJUnitPlatform()
}

//task copyVersion(type: Copy) {
//    from "version"
//    into "src/main/resources"
//}
//build.dependsOn copyVersion

task extractDependencies(type: Copy, dependsOn: jar) {
    from configurations.runtimeClasspath
    into "$buildDir/dependencies"
}

task fatJar(type: Jar, dependsOn: extractDependencies) {
    manifest {
        attributes 'Main-Class': 'org.mentalizr.cli.M7rCli'
        attributes 'Version': project.property("version")
        attributes 'Build' : new Date().format('yyyyMMddHHmmss')
    }
    from {
        file("$buildDir/dependencies").listFiles().collect { zipTree(it) }
    }
    from {
        file("$buildDir/libs").listFiles().collect { zipTree(it) }
    }
    destinationDirectory.set(file("$buildDir/fatjar"))
}

// TODO does not work:
// * UnresolvedElementException: Discovered unresolved type during parsing: javax.enterprise.inject.spi.BeanManager (--allow-incomplete-classpath)
// * RuntimeException: Error on initialization of version info.
task nativeImage(type: Exec, dependsOn: fatJar) {
    mkdir "$buildDir/native"
    commandLine "/man/java/graalvm/bin/native-image", "-H:+ReportExceptionStackTraces", "--no-fallback", "--allow-incomplete-classpath", "-jar", "$buildDir/fatjar/m7r-cli-0.0.1-SNAPSHOT.jar", "$buildDir/native/m7r"
}

